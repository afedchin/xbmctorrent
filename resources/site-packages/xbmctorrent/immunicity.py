import re
import fnmatch
import urllib2
from xbmctorrent import plugin
from xbmctorrent.caching import shelf
from xbmctorrent.common import RESOURCES_PATH

PAC_URL = "http://clientconfig.immunicity.org/pacs/all.pac"
CACHE = 1 * 3600 # 1 hour caching

_config = {}
def config():
    global _config
    if not _config:
        with shelf("xbmctorrent.immunicity.pac_config", ttl=CACHE) as pac_config:
            if not pac_config:
                plugin.log.info("Fetching Immunicity PAC file")
                try:
                    pac_data = urllib2.urlopen(PAC_URL).read()
                except:
                    pac_data = ""

                r = re.search(r"var proxyserver = '(.*)'", pac_data)
                if not r: # If immunicity bloked then read local copy
                    import os
                    with open(os.path.join(RESOURCES_PATH, "all.pac"), "r") as pacfile:
                        pac_data = pacfile.read()

                r = re.search(r"var proxyserver = '(.*)'", pac_data)
                if r:
                    pac_config["server"] = r.group(1)
                    pac_config["domains"] = map(lambda x: x.replace(r"\Z(?ms)", ""), map(fnmatch.translate, re.findall(r"\"(.*?)\",", pac_data)))
                else:
                    pac_config["server"] = None
                    pac_config["domains"] = []
            _config = pac_config
    return _config

def get_proxy_for(url, ignore_domain=False):
    conf = config()
    if ignore_domain:
        return conf["server"]
    for domain in conf["domains"]:
        if re.search(domain, url):
            return conf["server"]
